pipeline {
  agent any
  options { timestamps(); disableConcurrentBuilds() }

  // ==== ปรับ 3 ตัวนี้ให้ตรงกับ repo นี้ ====
  environment {
    APP_NAME            = 'grooming-web'     // api: grooming-api | web: grooming-web
    SERVICE_NAME        = 'web'              // api: api | web: web
    HEALTH_URL          = 'http://web/'      // api แนะนำ: http://api:8080/actuator/health

    // ==== คงที่ได้ ====
    COMPOSE_PROJECT     = 'bbp'
    DEPLOY_DIR          = '/workspace/deploy'
    DEPLOY_COMPOSE_APP  = "${DEPLOY_DIR}/docker-compose-app.yml"

    // โหลด Jenkins credentials เป็น env เสมอ (ได้ตัวแปร DOCKERHUB_USR / DOCKERHUB_PSW)
    DOCKERHUB           = credentials('dockerhub-creds')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Compute Tag') {
      steps {
        script {
          def shortHash = sh(returnStdout: true, script: 'git rev-parse --short=7 HEAD').trim()
          def dt        = sh(returnStdout: true, script: 'date +%Y%m%d-%H%M%S').trim()
          env.IMG_TAG   = "${dt}-${shortHash}"
          echo "Image tag: ${env.IMG_TAG}"
        }
      }
    }

    stage('Docker Login') {
      steps {
        sh label: 'docker login', script: '''
          set -e
          echo "$DOCKERHUB_PSW" | docker login -u "$DOCKERHUB_USR" --password-stdin
        '''
      }
    }

    stage('Build Image') {
      steps {
        sh label: 'docker build', script: '''
          set -e
          IMAGE="$DOCKERHUB_USR/${APP_NAME}:${IMG_TAG}"
          LATEST="$DOCKERHUB_USR/${APP_NAME}:latest"
          docker build --pull -t "$IMAGE" -t "$LATEST" -f Dockerfile .
        '''
      }
    }

    stage('Push Image') {
      steps {
        sh label: 'docker push', script: '''
          set -e
          IMAGE="$DOCKERHUB_USR/${APP_NAME}:${IMG_TAG}"
          LATEST="$DOCKERHUB_USR/${APP_NAME}:latest"
          docker push "$IMAGE"
          docker push "$LATEST"
        '''
      }
    }

    stage('Deploy: Pull') {
      steps {
        dir("${DEPLOY_DIR}") {
          sh label: 'compose pull', script: '''
            set -e
            docker compose --env-file .env -p ${COMPOSE_PROJECT} -f ${DEPLOY_COMPOSE_APP} pull ${SERVICE_NAME}
          '''
        }
      }
    }

    stage('Deploy: Up') {
      steps {
        dir("${DEPLOY_DIR}") {
          sh label: 'compose up -d', script: '''
            set -e
            docker compose --env-file .env -p ${COMPOSE_PROJECT} -f ${DEPLOY_COMPOSE_APP} up -d ${SERVICE_NAME}
          '''
        }
      }
    }

    stage('Health Check') {
      steps {
        sh label: 'check service', script: '''
          set -e
          for i in $(seq 1 12); do
            if wget -qS --spider ${HEALTH_URL} 2>&1 | grep -q "200 OK"; then
              echo "Health OK"
              exit 0
            fi
            echo "waiting health... ($i/12)"
            sleep 5
          done
          echo "Health check failed"; exit 1
        '''
      }
    }
  }

  post {
    success { echo "✅ Deployed ${env.APP_NAME}:${env.IMG_TAG} (${env.SERVICE_NAME})" }
    failure { echo "❌ Build/Deploy failed for ${env.APP_NAME}" }
  }
}
